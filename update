#!/bin/sh

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

ERROR=0

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

prev_rev=${oldrev}

# --- Loop through all commits in bacwards order (from down to top)
for cur_rev in `git rev-list --ancestry-path ${oldrev}..${newrev} | tac`; do
	for file in `git diff --name-status ${prev_rev} ${cur_rev} |
		grep -iP '.*\.(c|cpp|h|hpp)$' |     # Valid file type
		grep -v '^D' |                      # Skip deleted files
		cut -f 2`; do                       # Remove status, get only file name

		# --- Check if clang-format return error
		git show ${cur_rev}:${file} | clang-format --dry-run --Werror >/dev/null 2>&1
		RET=$?
		if [[ ${RET} != 0 ]]; then
			echo [STYLE ERROR] commit: ${cur_rev}, file: ${file}
			ERROR=1
		fi
	done

	# Help variable: compare only two near commits
	prev_rev=${cur_rev}
done

if [[ ${ERROR} != 0 ]]; then
	exit 1
fi

exit 0
